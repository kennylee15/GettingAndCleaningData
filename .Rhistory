get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m }
a<-makeVector(c(1,2,3))
a$get()
a$set(c(2,3,4))
a$get()
a$getmean
a$getmean(a)
a$getmean()
a$getmean()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = get, get = get,
setInverse = setInverse,
getInverser = getInverse)
}
x <- matrix(rnorm(5*5),5,5)
x
a <- makeCacheMatrix(x)
a
# Kenny Kyunghoon Lee (leehkenny@gmail.com)
# makeCacheMatrix creates a special list of the following 4 functions
# $get returns the matrix
# $set resets the matrix and mean globally
# $getInverse returns the inverse of the matrix
# $setInverse saves the inverse globally
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = get, get = get,
setInverse = setInverse,
getInverser = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}   # Return the inverse matrix if there already inv cached
d <- x$get()
inv <- solve(d)
x$setInverse(inv)
inv
}
x
a <- makeCacheMatrix(x)
result <- cacheSolve(x)
result <- cacheSolve(a)
inv
View(x)
View(result)
# Understanding supperassignment operator
x = NULL
crazy <- function() {
x <- 3.14
print(x)
{print(x)
x <<- 42
print(x)
}
print(x)
}
x
print(x)
crazy()
rm(x)
# Understanding supperassignment operator
crazy <- function() {
x <- 3.14
print(x)
{print(x)
x <<- 42
print(x)
}
print(x)
}
x
crazy <- function() {
x <<- 3.14                   # variable x in the containing environment (global in this case) is updated to be 3.14
print(x)                        # since no local variable ‘x’ exists within function ‘crazy’ R searches the containing environments
{ print(x);                     # this is to demonstrate the function, not a code block, is the smallest environment in R
x <- 42; print(x)         # local variable ‘x’ is declared (created) and assigned the value 42; overrides the variable ‘x’ in
}                                  # the containing environment
print(x)                       # since local variable ‘x’ now exists within the function there is no need to search the containing
}                                   # environment (global in this case)
x<-
0
crazy()
x
x
str(rnorm)
x <- matrox
x <- matrix(rnorm(25, mean=5),5,5)
x
makeCacheMatrix()
cacheSolve(x)
cacheSolve(a)
cacheSolve(a)
get(x)
get()
x
get()
a$get()
cacheSolve(a)
x
get(x)
a$get()
makeCacheMatrix(x)
a$get()
rm(x)
a$get()
rm(result)
x
x
a$get()
a$set(x)
a$set()
# Kenny Kyunghoon Lee (leehkenny@gmail.com)
# makeCacheMatrix creates a special list of the following 4 functions
# $get returns the matrix
# $set resets the matrix and mean globally
# $getInverse returns the inverse of the matrix
# $setInverse saves the inverse globally
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = get, get = get,
setInverse = setInverse,
getInverser = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}   # Return the inverse matrix if there already inv cached
d <- x$get()
inv <- solve(d)
x$setInverse(inv)
inv
}
a$set()
x
rm(a)
a <- makeCacheMatrix()
x <- matrix(rnorm(25, mean = 10),5,5)
x
cacheSolve(x)
cacheSolve(a)
cacheSolve(a)
a$get()
x
rm(a)
# Kenny Kyunghoon Lee (leehkenny@gmail.com)
# makeCacheMatrix creates a special list of the following 4 functions
# $get returns the matrix
# $set resets the matrix and mean globally
# $getInverse returns the inverse of the matrix
# $setInverse saves the inverse globally
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = get, get = get,
setInverse = setInverse,
getInverser = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}   # Return the inverse matrix if there already inv cached
d <- x$get()
inv <- solve(d)
x$setInverse(inv)
inv
}
a <- makeCacheMatrix()
a
a$get(a)
a$get()
x
a <- makeCacheMatrix(x)
a$get()
cacheSolve(a)
b <- cacheSolve(a)
b
x %*% b
str(print)
str(c(3234,123,123))
str(ls)
x<-rnorm(100,2,4)
str(rnorm)
summary(x)
str(x)
rm x
rm(x)
library(datasets)
data("iris")
str(iris)
head(iris)
?iris
head(species)
head($species)
summary(species)
summary(iris$species)
str(tapply)
tapply(iris,$species)
?iris
split(iris)
f <- gl(1:3)
gl
s <- split(iris, iris$Species)
lapply(s, mean)
lapply(s, function(x) colMeans(x[,"Species"])
)
lapply(s, function(x) colMeans(x[,"Species"])
)
lapply(s, function(x) colMeans(x[,"Species"]))
lapply(s, function(x) colMeans(iris[,"Species"]))
lapply(s, function(iris) colMeans(iris[,"Species"]))
lapply(s, function(x) colMeans(x[,c("Species"]))
lapply(s, function(x) colMeans(x[,c("Species")]))
help(colMeans)
lapply(s, function(x) colMeans(x[,c("Species")]))
str(colMean)
str(colMeans)
lapply(s, function(x) colMeans(x[,c("Species")], dims = 1L))
lapply(s, function(x) colMeans(x[,c("Species", "Sepal.Length")]))
lapply(s, function(x) colMeans(x[,c("Sepal.Width", "Sepal.Length")]))
apply(iris[, 1:4], 2, mean)
str(iris)
head(iris)
apply(iris[, 1:4], 2, mean)
s
str(apply)
help(apply)
apply(iris, 1, mean)
apply(iris, 2, mean)
library(datasets)
data(mtcars)
rm(iris)
data("mtcars")
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
s<-tapply(mtcars$mpg, mtcars$cyl, mean)
s
s[1]
abs(s[1])
abs(s[1]-s[3])
s[3]
abs(s[1]-s[3])
debug(ls)
ls(df)
quit()
library(datasets)
data(mtcars)
head(mtcars)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(cyl, mpg, mean)
s<-tapply(mtcars$cyl, mtcars$mpg, mean)
s<-with(mtcars, tapply(mpg, cyl, mean))
s
s[1]-s[3]
s<-with(mtcars, tapply(hp, cyl, mean))
s
s[1]-s[3]
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
library("RMySQL")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
hg19 <- dbConnect(MySQL(), user = "genome", db = "hg19", host = "genome-mysql.cse.ucsc.edu")
# ** check what tables are in that particular db (in this case hg19)
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
# Show all the columns
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
warnings()
query
query
affyMis <- fetch(query)
affyMis
head(affyMis)
quantile(affyMis$misMathces)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query)
quantile(affyMis$misMathces)
?query
??query
dbDisconnect()
dbDisconnect(ucscdb)
ucscdb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
class(ucscdb)
dbDisconnect(ucscdb)
if (mysqlHasDefault()) {
con <- dbConnect(RMySQL::MySQL(), dbname = "test")
tmp <- sprintf("SELECT * FROM emp WHERE lname = %s", "O'Reilly")
dbEscapeStrings(con, tmp)
dbDisconnect(con)
}
dbClearResult(query)
affyMisSmall <- fetch(query, n = 10)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
ucscdb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
ucscdb <- dbConnect(MySQL(), user = "genome", host = "genome-mysql.cse.ucsc.edu")
hg19 <- dbConnect(MySQL(), user = "genome", db = "hg19", host = "genome-mysql.cse.ucsc.edu")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query)
quantile(affyMis$misMathces)
affyMisSmall <- fetch(query, n = 10)
affyMisSmall <- fetch(query, n = 10)
affyMisSmally
affyMisSmall
dbClearResult(query)
dbDisconnect(hg19)
install.packages("KernSmooth")
library(KernSmooth)
setwd("/Users/kennylee/Documents/r_scripts/assignment")
?unzip
?unzip
time()
time(x)
Sys.time()
if(!file.exists("./data")) {dir.create("./data")}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
downloaded_time <- Sys.time()
download.file(fileUrl, destfile="./data/dataset.zip", method="curl")
# unzip the file
unzip("./data/dataset.zip", exdir = "./data")
paths <- file.path("./data" , "UCI HAR Dataset")
files <- list.files(path_rf, recursive=TRUE)
files
paths <- file.path("./data" , "UCI HAR Dataset")
files <- list.files(paths, recursive=TRUE)
files
ActivityTest  <- read.table(file.path(paths, "test" , "Y_test.txt" ),header = FALSE)
ActivityTrain <- read.table(file.path(paths, "train", "Y_train.txt"),header = FALSE)
SubjectTrain <- read.table(file.path(paths, "train", "subject_train.txt"),header = FALSE)
SubjectTest  <- read.table(file.path(paths, "test" , "subject_test.txt"),header = FALSE)
FeaturesTest  <- read.table(file.path(paths, "test" , "X_test.txt" ),header = FALSE)
FeaturesTrain <- read.table(file.path(paths, "train", "X_train.txt"),header = FALSE)
str(ActivityTest)
head(ActivityTest,n = 5)
str(SubjectTest)
str(SubjectTrain)
?rbind
Subject <- rbind(SubjectTrain, SubjectTest)
Activity<- rbind(ActivityTrain, ActivityTest)
Features<- rbind(FeaturesTrain, FeaturesTest)
str(Subject)
names(Subject)
names(Activity)
names(Features)
names(Features)
files
FeaturesNames <- read.table(file.path(paths, "features.txt"), header = FALSE)
names(Features)
FeaturesNames
FeaturesNames$V2
FeaturesNames$V2
?dataCombine
?merge
?cbind
data <- cbind(Subject, Activity, Features)
str(data)
data$V15
str(data)
names(data)
names(Subject) <- "Subject"
names(Activity) <- "Activity"
names(Features) <- FeaturesNames$V2
# merges the data by columns
data <- cbind(Subject, Activity, Features)
str(data)
names(data)
subdataFeaturesNames <- FeaturesNames$V2[grep("mean\\(\\) | std\\(\\)", FeaturesNames$V2)]
head(subdataFeaturesNames)
as.character(subdataFeaturesNames)
?c
data <- cbind(Subject, Activity, Features)
str(data)
SubsetFeaturesNames <- FeaturesNames$V2[grep("mean\\(\\) | std\\(\\)", FeaturesNames$V2)]
SubsetNames <- c(as.character(SubsetFeaturesNames), "subject", "activity" )
data <- subset(data, select = SubsetNames)
data <- subset(data, select = SubsetNames)
SubsetNames <- c(as.character(SubsetFeaturesNames), "subject", "activity" )
SubsetNames
?subset
data <- subset(data, select = c(as.character(SubsetFeaturesNames), "subject", "activity" ))
rm(SubsetNames)
data <- subset(data, select = c(as.character(SubsetFeaturesNames), "Subject", "Activity" ))
str(data)
str(data)
SubsetFeaturesNames <- FeaturesNames$V2[grep("mean\\(\\) | std\\(\\)", FeaturesNames$V2)]
data <- subset(data, select = c(as.character(SubsetFeaturesNames), "Subject", "Activity" ))
str(data)
names(Subject) <- "Subject"
names(Activity) <- "Activity"
names(Features) <- FeaturesNames$V2
data <- cbind(Subject, Activity, Features)
str(data)
SubsetFeaturesNames <- FeaturesNames$V2[grep("mean\\(\\) | std\\(\\)", FeaturesNames$V2)]
str(SubsetFeaturesNames)
as.character(SubsetFeaturesNames)
data <- subset(data, select = c(SubsetFeaturesNames, "Subject", "Activity" ))
str(data)
SubsetFeaturesNames
SubsetFeaturesNames <- FeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", FeaturesNames$V2)]
data <- subset(data, select = c(SubsetFeaturesNames, "Subject", "Activity" ))
data <- subset(data, select = c(SubsetFeaturesNames, "Subject", "Activity" ))
data <- subset(data, select = c(SubsetFeaturesNames, "Subject", "Activity" ))
SubsetFeaturesNames <- FeaturesNames$V2[grep("mean\\(\\) | std\\(\\)", FeaturesNames$V2)]
str(data)
SubsetFeaturesNames <- FeaturesNames$V2[grep("mean\\(\\) | std\\(\\)", FeaturesNames$V2)]
data <- subset(data, select = c(SubsetFeaturesNames, "Subject", "Activity" ))
SubsetFeaturesNames <- FeaturesNames$V2[grep("mean\\(\\) | std\\(\\)", FeaturesNames$V2)]
names(Subject) <- "Subject"
names(Activity) <- "Activity"
names(Features) <- FeaturesNames$V2
# merges the data by columns
data <- cbind(Subject, Activity, Features)
str(data)
SubsetFeaturesNames <- FeaturesNames$V2[grep("mean\\(\\) | std\\(\\)", FeaturesNames$V2)]
data <- subset(data, select = c(SubsetFeaturesNames, "Subject", "Activity" ))
str(data)
FeaturesNames$V2[grep("mean\\(\\) | std\\(\\)", FeaturesNames$V2)]
SubsetFeaturesNames <- grep("mean\\(\\) | std\\(\\)", FeaturesNames$V2)
grep("mean\\(\\) | std\\(\\)", FeaturesNames$V2)
SubsetFeaturesNames <- FeaturesNames$V2[grep("mean\\(\\) | std\\(\\)", FeaturesNames$V2)]
data <- subset(data, select = c(as.character(SubsetFeaturesNames), "Subject", "Activity" ))
SubsetFeaturesNames <- FeaturesNames$V2[grep("mean() | std()", FeaturesNames$V2)]
data <- subset(data, select = c(as.character(SubsetFeaturesNames), "Subject", "Activity" ))
str(data)
SubsetFeaturesNames <- FeaturesNames$V2[grep("mean\\(\\)|std\\(\\)", FeaturesNames$V2)]
data <- subset(data, select = c(as.character(SubsetFeaturesNames), "Subject", "Activity" ))
SubsetFeaturesNames <- FeaturesNames$V2[grep("mean()|std()", FeaturesNames$V2)]
data <- subset(data, select = c(as.character(SubsetFeaturesNames), "Subject", "Activity" ))
SubsetFeaturesNames <- FeaturesNames$V2[grep("mean() | std()", FeaturesNames$V2)]
data <- subset(data, select = c(as.character(SubsetFeaturesNames), "Subject", "Activity" ))
data <- subset(data, select = c(as.character(SubsetFeaturesNames), "Subject", "Activity" ))
str(data)
names(Subject) <- "Subject"
names(Activity) <- "Activity"
names(Features) <- FeaturesNames$V2
# merges the data by columns
data <- cbind(Subject, Activity, Features)
str(data)
SubsetFeaturesNames <- FeaturesNames$V2[grep("mean() | std()", FeaturesNames$V2)]
data <- subset(data, select = c(as.character(SubsetFeaturesNames), "Subject", "Activity" ))
str(data)
SubsetFeaturesNames <- FeaturesNames$V2[grep("\\mean() | std()", FeaturesNames$V2)]
data <- subset(data, select = c(as.character(SubsetFeaturesNames), "Subject", "Activity" ))
str(data)
SubsetFeaturesNames <- FeaturesNames$V2[grep("^mean() | std()", FeaturesNames$V2)]
data <- subset(data, select = c(as.character(SubsetFeaturesNames), "Subject", "Activity" ))
names(Subject) <- "Subject"
names(Activity) <- "Activity"
names(Features) <- FeaturesNames$V2
# merges the data by columns
data <- cbind(Subject, Activity, Features)
str(data)
SubsetFeaturesNames <- FeaturesNames$V2[grep("^mean() | std()", FeaturesNames$V2)]
data <- subset(data, select = c(as.character(SubsetFeaturesNames), "Subject", "Activity" ))
str(data)
